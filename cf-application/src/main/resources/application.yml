server:
  port: ${SERVER_PORT:9000}

spring:
  task:
    execution:
      thread-name-prefix: lob-service-task-executor-
      pool:
        core-size: 2
        max-size: 50
        queue-capacity: 10000
  kafka:
    enabled: true
    bootstrap-servers: kafka:9092
    consumer:
      group-id: lob-consumer123
      auto-offset-reset: latest
  rabbitmq:
    enabled: false

  threads:
    virtual:
      enabled: true

  jpa:
    properties:
      org:
        hibernate:
          envers:
            embeddable_set_ordinal_field_name: "ord"
            audit_table_suffix: _aud
            store_data_at_delete: true
    open-in-view: false
#    show-sql: true

  sql:
    init:
      mode: never
      #schema-locations: classpath:db/schema.sql

  datasource:
    name: ${DB_NAME:lob_service}
    url: ${DB_URL:jdbc:postgresql://localhost:5432/postgres?currentSchema=lob_service}
    username: ${DB_USER:postgres}
    password: ${DB_PASSWORD:postgres}
    driver-class-name: ${DB_DRIVER_CLASS_NAME:org.postgresql.Driver}

    hikari:
      minimum-idle: ${DB_MIN_IDLE:2}
      maximum-pool-size: ${DB_MAX_POOL_SIZE:10}
      idle-timeout: ${DB_IDLE_TIMEOUT:30000}
      schema: ${DB_SCHEMA:lob_service}
      #auto-commit: ${DB_AUTO_COMMIT:false}

    jpa:
      database-platform: ${DB_DIALECT:org.hibernate.dialect.PostgreSQLDialect}
      hibernate:
        ddl-auto: none
        show_sql: ${JPA_SHOW_SQL:false}

  web:
    resources:
      add-mappings: false
    # disable static content handling
    spring.web.resources.add-mappings: false
    spring.mvc.throw-exception-if-no-handler-found: true
    # force charset in request and responses
    servlet:
      encoding:
        force: true

    exposure:
      include: ${WEB_EXPOSURE_INCLUDE:health,info,prometheus,metrics,flyway,applicationmodules}

  artemis:
    embedded:
      topics=target: target

  main:
    allow-bean-definition-overriding: true

  health:
    enabled: ${HEALTH_ENABLED:true}

  endpoint:
    health:
      show-details: ${MANAGEMENT_ENDPOINT_SHOW_DETAILS:always}

  modulith:
    events:
      externalization:
        enabled: true
      republish-outstanding-events-on-restart: false
      completion-mode: archive
      kafka:
        enable-json: true


    jdbc:
      schema-initialization:
        enabled: true



lob:
  # Default path is for Docker
  mock-result-path: ${LOB_MOCK_RESULT_PATH:/app/cf-application/src/main/resources/json/NetSuiteIngestionMock.json}
  blockchain_reader:
    enabled: ${LOB_BLOCKCHAIN_READER_ENABLED:true}

  accounting_reporting_core:
    enabled: ${LOB_ACCOUNTING_REPORTING_CORE_ENABLED:true}

  organisation:
    enabled: ${LOB_ORGANISATION_ENABLED:true}

  blockchain_publisher:
    enabled: ${LOB_BLOCKCHAIN_PUBLISHER_ENABLED:true}

  cors:
    allowed:
      origins: ${LOB_CORS_ALLOWED_ORIGINS:http://localhost:3000}
  dispatching:
    strategy:
      type: ${LOB_DISPATCHING_STRATEGY:DELAYED}

  netsuite:
    enabled: ${LOB_NETSUITE_ENABLED:true}
    financial:
      period:
        source: EXPLICIT

    client:
      realm: ${NETSUITE_ALTAVIA_ADAPTER_CLIENT_REALM:<enter value>}
      oauth_nonce: ${NETSUITE_ALTAVIA_ADAPTER_CLIENT_OAUTH_NONCE:<enter value>}
      consumer_key: ${NETSUITE_ALTAVIA_ADAPTER_CLIENT_CONSUMER_KEY:<enter value>}
      token_secret: ${NETSUITE_ALTAVIA_ADAPTER_CLIENT_TOKEN_SECRET:<enter value>}
      consumer_secret: ${NETSUITE_ALTAVIA_ADAPTER_CLIENT_CONSUMER_SECRET:<enter value>}
      token: ${NETSUITE_ALTAVIA_ADAPTER_CLIENT_TOKEN:<enter value>}
      url: ${NETSUITE_ALTAVIA_ADAPTER_CLIENT_URL:<enter value>}

  l1:
    transaction:
      metadata:
        validation:
          enable: ${LOB_L1_TRANSACTION_METADATA_VALIDATION_ENABLED:true}
      metadata_label: ${LOB_L1_TRANSACTION_METADATA_LABEL:1447}

  blockfrost:
    url: ""
    api_key: ""

# yaci store
store:
  cardano:
    host: ${CARDANO_NODE_HOST:preprod-node.world.dev.cardano.org}
    port: ${CARDANO_NODE_PORT:30000}
    # protocol magic 1 = Cardano PreProd network
    protocol-magic: ${CARDANO_NODE_PROTOCOL_MAGIC:1}

  sync-start-blockhash: ${YACI_STORE_CARDANO_SYNC_START_BLOCK_HASH:274218b4101de63d02dd38fa0ff9be75a1c146667f4aa67fe8a04e462c8c55b1}
  sync-start-slot: ${YACI_STORE_CARDANO_SYNC_START_SLOT:67868386}

  blocks.epoch-calculation-interval: 86400
  blocks.epoch-calculation-enabled: false

apiPrefix: ${API_PREFIX:/yaci-api}

endpoints:
  health:
    enabled: ${HEALTH_ENABLED:true}
  management:
  endpoints:
    web:
      exposure:
        include: ${WEB_EXPOSURE_INCLUDE:health,info,prometheus,metrics,scheduledtasks,flyway}
    health:
      show-details: ${MANAGEMENT_ENDPOINT_SHOW_DETAILS:always}

keycloak:
  enabled: true
  base-url: ${KC_BASE_URL:http://localhost:8050}
  realm: cf-master
  public-client: true
  resource: webclient
  bearer-only: true
  principal-attribute: preferred_username
  token-url: ${keycloak.base-url}/realms/${keycloak.realm}/protocol/openid-connect/token
  cert-url: ${keycloak.base-url}/realms/${keycloak.realm}/protocol/openid-connect/certs
  authorization-url: ${keycloak.base-url}/realms/${keycloak.realm}/protocol/openid-connect/auth
  roles:
    auditor: cf_auditor
    manager: cf_manager
springdoc:
  api-docs.enabled: true
  swagger-ui:
    oauth:
      client-id: webclient
      realm: cf-master
    oauth2-redirect-url: ${OAUTH2_REDIRECT_URL:http://localhost:9000/swagger-ui/oauth2-redirect.html}
