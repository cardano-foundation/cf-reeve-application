server:
  port: ${SERVER_PORT:9000}
management:
  endpoints:
    web:
      exposure:
        include: "*"
  endpoint:
    metrics:
      enabled: true
  metrics:
    enable:
      all: true
spring:
  task:
    execution:
      thread-name-prefix: lob-service-task-executor-
      pool:
        core-size: 2
        max-size: 50
        queue-capacity: 10000
  kafka:
    enabled: true
    bootstrap-servers: kafka:9092
    consumer:
      group-id: lob-consumer
      auto-offset-reset: latest
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring:
          json:
            trusted:
              packages: '*'
        fetch:
            max:
                bytes: 15728640 # 15MB
      enable-auto-commit: false
      auto-commit-interval: 1000
    producer:
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      retries: 0
      properties:
        max:
          request:
            size: 15728640 # 15MB
  rabbitmq:
    enabled: false

  threads:
    virtual:
      enabled: true

  jpa:
    properties:
      org:
        hibernate:
          envers:
            embeddable_set_ordinal_field_name: "ord"
            audit_table_suffix: _aud
            store_data_at_delete: true
#          format_sql: true
    open-in-view: false
#    show-sql: true

  sql:
    init:
      mode: never
      #schema-locations: classpath:db/schema.sql

  datasource:
    name: ${DB_NAME:lob_service}
    url: ${DB_URL:jdbc:postgresql://localhost:5432/postgres?currentSchema=lob_service}
    username: ${DB_USER:postgres}
    password: ${DB_PASSWORD:postgres}
    driver-class-name: ${DB_DRIVER_CLASS_NAME:org.postgresql.Driver}

    hikari:
      minimum-idle: ${DB_MIN_IDLE:5}
      # on peak load there can be a lot of connections and this should be able to handle it
      maximum-pool-size: ${DB_MAX_POOL_SIZE:100}
      idle-timeout: ${DB_IDLE_TIMEOUT:30000}
      schema: ${DB_SCHEMA:lob_service}
      #auto-commit: ${DB_AUTO_COMMIT:false}
      connection-timeout: ${DB_CONNECTION_TIMEOUT:50000}

    jpa:
      database-platform: ${DB_DIALECT:org.hibernate.dialect.PostgreSQLDialect}
      hibernate:
        ddl-auto: none
        show_sql: ${JPA_SHOW_SQL:false}
  flyway:
    out-of-order: false
    url: ${DB_URL:jdbc:postgresql://localhost:5432/postgres}
    user: ${DB_USER:postgres}
    password: ${DB_PASSWORD:postgres}
    schemas: ${DB_SCHEMA:lob_service}
    # baselineOnMigrate this will create a baseline version if none exists (https://flywaydb.org/documentation/configuration/parameters/baselineOnMigrate)
    baselineOnMigrate: true
    enabled: true
    validateMigrationNaming: true
  web:
    resources:
      add-mappings: false
    # disable static content handling
    spring.web.resources.add-mappings: false
    spring.mvc.throw-exception-if-no-handler-found: true
    # force charset in request and responses
  servlet:
    encoding:
      force: true
    multipart:
      enabled: true
      max-file-size: 10MB
      max-request-size: 10MB

    exposure:
      include: ${WEB_EXPOSURE_INCLUDE:health,info,prometheus,metrics,flyway,applicationmodules}

  artemis:
    embedded:
      topics=target: target

  main:
    allow-bean-definition-overriding: true

  health:
    enabled: ${HEALTH_ENABLED:true}

  endpoint:
    health:
      show-details: ${MANAGEMENT_ENDPOINT_SHOW_DETAILS:always}

lob:
  # Default path is for Docker
  mock-result-path: ${LOB_MOCK_RESULT_PATH:/app/cf-application/src/main/resources/db/migrations/postgresql/cf-reeve-db-migrations/NetSuiteIngestionMock.json}
  blockchain_reader:
    enabled: ${LOB_BLOCKCHAIN_READER_ENABLED:true}
  accounting_reporting_core:
    enabled: ${LOB_ACCOUNTING_REPORTING_CORE_ENABLED:true}
    debounce:
      duration: ${LOB_ACCOUNTING_REPORTING_CORE_DEBOUNCE_DURATION:PT10S}
    topics:
      tx-ledger-updated-event: accounting_reporting_core.domain.event.ledger.TxsLedgerUpdatedEvent
      reports-ledger-updated-event: accounting_reporting_core.domain.event.ledger.ReportsLedgerUpdatedEvent
      transaction-batch-failed-event: accounting_reporting_core.domain.event.extraction.TransactionBatchFailedEvent
      transaction-batch-started-event: accounting_reporting_core.domain.event.extraction.TransactionBatchStartedEvent
      transaction-batch-chunk-event: accounting_reporting_core.domain.event.extraction.TransactionBatchChunkEvent
      reconcilation-failed-event: accounting_reporting_core.domain.event.reconcilation.ReconcilationFailedEvent
      reconcilation-started-event: accounting_reporting_core.domain.event.reconcilation.ReconcilationStartedEvent
      reconcilation-chunk-event: accounting_reporting_core.domain.event.reconcilation.ReconcilationChunkEvent
      reconcilation-finalisation-event: accounting_reporting_core.domain.event.reconcilation.ReconcilationFinalisationEvent
      validate-ingestion-response-event: accounting_reporting_core.domain.event.extraction.ValidateIngestionResponseEvent
  organisation:
    enabled: ${LOB_ORGANISATION_ENABLED:true}
  blockchain_publisher:
    enabled: ${LOB_BLOCKCHAIN_PUBLISHER_ENABLED:true}
    maxDelay: ${LOB_BLOCKCHAIN_PUBLISHER_MAX_DELAY:PT5M}
    topics:
      report-ledger-update-command: accounting_reporting_core.domain.event.ledger.ReportLedgerUpdateCommand
      transaction-ledger-update-commander: accounting_reporting_core.domain.event.ledger.TransactionLedgerUpdateCommand
    keri:
      enabled: ${LOB_BLOCKCHAIN_PUBLISHER_KERI_ENABLED:false}
      url: ${LOB_BLOCKCHAIN_PUBLISHER_KERI_URL:http://127.0.0.1:3901}
      booturl: ${LOB_BLOCKCHAIN_PUBLISHER_KERI_BOOTURL:http://127.0.0.1:3903}
      metadata_label: ${LOB_BLOCKCHAIN_PUBLISHER_KERI_METADATA_LABEL:1}
      identifier:
        bran: ${LOB_BLOCKCHAIN_PUBLISHER_KERI_IDENTIFIER_BRAN:0ADF2TpptgqcDE5IQUF1H}
        name: ${LOB_BLOCKCHAIN_PUBLISHER_KERI_IDENTIFIER_NAME:identity}
        role: ${LOB_BLOCKCHAIN_PUBLISHER_KERI_IDENTIFIER_ROLE:agent}
  cors:
    allowed:
      origins: ${LOB_CORS_ALLOWED_ORIGINS:http://localhost:3000}
  dispatching:
    strategy:
      type: ${LOB_DISPATCHING_STRATEGY_TYPE:DELAYED}

  netsuite:
    enabled: ${LOB_NETSUITE_ENABLED:true}
    financial:
      period:
        source: EXPLICIT
    topics:
      scheduled-ingestion-event: accounting_reporting_core.domain.event.extraction.ScheduledIngestionEvent
      validate-ingestion-event: accounting_reporting_core.domain.event.extraction.ValidateIngestionEvent
      transaction-batch-created-event: accounting_reporting_core.domain.event.extraction.TransactionBatchCreatedEvent
      scheduled-reconcilation-event: accounting_reporting_core.domain.event.reconcilation.ScheduledReconcilationEvent
      reconcilation-created-event: accounting_reporting_core.domain.event.reconcilation.ReconcilationCreatedEvent
    client:
      token-url: ${LOB_NETSUITE_CLIENT_TOKEN_URL:<enter value>}
      private-key-file-path: ${LOB_NETSUITE_CLIENT_PRIVATE_KEY_FILE_PATH:<enter value>}
      url: ${LOB_NETSUITE_CLIENT_URL:<enter value>}
      client-id: ${LOB_NETSUITE_CLIENT_CLIENT_ID:<enter value>}
      certificate-id: ${LOB_NETSUITE_CLIENT_CERTIFICATE_ID:<enter value>}
      recordspercall: ${LOB_NETSUITE_CLIENT_RECORDSPERCALL:10000}
      timeout-seconds: ${LOB_NETSUITE_CLIENT_TIMEOUT_SECONDS:300}
  csv:
    enabled: ${LOB_CSV_ENABLED:true}
    delimiter: ${LOB_CSV_DELIMITER:,}
    send-batch-size: ${LOB_CSV_SEND_BATCH_SIZE:100}
  l1:
    transaction:
      metadata:
        validation:
          enable: ${LOB_L1_TRANSACTION_METADATA_VALIDATION_ENABLED:true}
      metadata_label: ${LOB_L1_TRANSACTION_METADATA_LABEL:1447}
  security:
    clamav:
      enabled: ${LOB_SECURITY_CLAMAV_ENABLED:false}
      host: ${LOB_SECURITY_CLAMAV_HOST:localhost}
      port: ${LOB_SECURITY_CLAMAV_PORT:3310}

# yaci store
store:
  cardano:
    host: ${STORE_CARDANO_HOST:preprod-node.world.dev.cardano.org}
    port: ${STORE_CARDANO_PORT:30000}
    # protocol magic 1 = Cardano PreProd network
    protocol-magic: ${STORE_CARDANO_PROTOCOL_MAGIC:1}

    sync-start-blockhash: ${STORE_CARDANO_SYNC_START_BLOCKHASH:274218b4101de63d02dd38fa0ff9be75a1c146667f4aa67fe8a04e462c8c55b1}
    sync-start-slot: ${STORE_CARDANO_SYNC_START_SLOT:67868386}

  blocks.epoch-calculation-interval: 86400
  blocks.epoch-calculation-enabled: false

apiPrefix: ${API_PREFIX:/yaci-api}

endpoints:
  health:
    enabled: ${HEALTH_ENABLED:true}
  management:
  endpoints:
    web:
      exposure:
        include: ${WEB_EXPOSURE_INCLUDE:health,info,prometheus,metrics,scheduledtasks,flyway}
    health:
      show-details: ${MANAGEMENT_ENDPOINT_SHOW_DETAILS:always}

keycloak:
  enabled: true
  base-url: ${KC_BASE_URL:http://localhost:8080}
  realm: reeve-master
  public-client: true
  resource: webclient
  bearer-only: true
  principal-attribute: preferred_username
  token-url: ${keycloak.base-url}/realms/${keycloak.realm}/protocol/openid-connect/token
  cert-url: ${keycloak.base-url}/realms/${keycloak.realm}/protocol/openid-connect/certs
  authorization-url: ${keycloak.base-url}/realms/${keycloak.realm}/protocol/openid-connect/auth
  roles:
    auditor: reeve_auditor
    manager: reeve_account_manager
    accountant: reeve_accountant
    admin: reeve_admin
springdoc:
  api-docs.enabled: true
  swagger-ui:
    oauth:
      client-id: webclient
      realm: reeve-master
    oauth2-redirect-url: ${OAUTH2_REDIRECT_URL:http://localhost:9000/swagger-ui/oauth2-redirect.html}
security:
  csp-policy: "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; connect-src 'self' http://localhost:8080; frame-src http://localhost:8080"
