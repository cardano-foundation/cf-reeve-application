{
	"info": {
		"_postman_id": "6e11bb3e-540f-4c56-a108-2ffb7fbe6d2d",
		"name": "Reeve Integration",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "32834089"
	},
	"item": [
		{
			"name": "Authorization",
			"item": [
				{
					"name": "Get Access Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"pm.environment.set(\"access_token\", response.access_token);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "string"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "client_id",
									"value": "webclient",
									"type": "text"
								},
								{
									"key": "username",
									"value": "{{admin_username}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{admin_password}}",
									"type": "text"
								},
								{
									"key": "grant_type",
									"value": "password",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{keycloak_url}}/realms/{{realm_name}}/protocol/openid-connect/token",
							"host": [
								"{{keycloak_url}}"
							],
							"path": [
								"realms",
								"{{realm_name}}",
								"protocol",
								"openid-connect",
								"token"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Organisation",
			"item": [
				{
					"name": "GET Organisation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check if response status code is 200",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse response JSON",
									"const jsonData = pm.response.json();",
									"",
									"// Check if 'keyName' exists and equals 'expectedValue'",
									"pm.test(\"Check if  name is Cardano Foundation\", function () {",
									"    pm.expect(jsonData.name).to.eql(\"Cardano Foundation\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/organisations/{{orgId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"organisations",
								"{{orgId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Organisation Validate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check if response status code is 200",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse response JSON",
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Check if org is valid\", function () {",
									"",
									"    pm.expect(jsonData.valid).to.eql(true);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/organisations/{{orgId}}/validate",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"organisations",
								"{{orgId}}",
								"validate"
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT Organisation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check if response status code is 200",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse response JSON",
									"const jsonData = pm.response.json();",
									"",
									"// Check if 'keyName' exists and equals 'expectedValue'",
									"pm.test(\"Check if  name has changed\", function () {",
									"    pm.expect(jsonData.address).to.eql(\"Ballyhealy Cottage\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Cardano Foundation\",\n  \"city\": \"City Name\",\n  \"postCode\": \"Y35 C6KC\",\n  \"province\": \"Co. Wexford\",\n  \"address\": \"Ballyhealy Cottage\",\n  \"phoneNumber\": \"0035863286566\",\n  \"adminEmail\": \"lob@cardanofoundation.org\",\n  \"websiteUrl\": \"http://cardanofoundation.org\",\n  \"currencyId\": \"ISO_4217:CHF\",\n  \"reportCurrencyId\": \"ISO_4217:CHF\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/v1/organisations/{{orgId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"organisations",
								"{{orgId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET VAT Codes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check if response status code is 200",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse response JSON",
									"const jsonData = pm.response.json();",
									"",
									"// Check if 'keyName' exists and equals 'expectedValue'",
									"pm.test(\"Check if array contains elements\", function () {",
									"    pm.expect(jsonData).to.be.an('array').that.is.not.empty;",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/organisations/{{orgId}}/vat-codes",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"organisations",
								"{{orgId}}",
								"vat-codes"
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT VAT Codes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check if response status code is 200",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse response JSON",
									"const jsonData = pm.response.json();",
									"",
									"// Check if 'keyName' exists and equals 'expectedValue'",
									"pm.test(\"Check if  rate has changed\", function () {",
									"    pm.expect(jsonData.rate).to.eql(\"0\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"customerCode\": \"CH-N\",\n    \"description\": \"description\",\n    \"rate\": \"0\",\n    \"active\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/v1/organisations/{{orgId}}/vat-codes",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"organisations",
								"{{orgId}}",
								"vat-codes"
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT VAT Codes - Unkown Code",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check if response status code is 200",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"// Parse response JSON",
									"const jsonData = pm.response.json();",
									"",
									"// Check if 'keyName' exists and equals 'expectedValue'",
									"pm.test(\"Check if error\", function () {",
									"    pm.expect(jsonData.error.title).to.eql(\"ORGANISATION_VAT_DO_NOT_EXISTS\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"customerCode\": \"CH-N123\",\n    \"description\": \"description\",\n    \"rate\": \"0\",\n    \"active\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/v1/organisations/{{orgId}}/vat-codes",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"organisations",
								"{{orgId}}",
								"vat-codes"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST VAT Codes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check if response status code is 200",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse response JSON",
									"const jsonData = pm.response.json();",
									"",
									"// Check if 'keyName' exists and equals 'expectedValue'",
									"pm.test(\"Check if inserted\", function () {",
									"    const randomNumber = pm.environment.get(\"randomNumber\");",
									"    pm.expect(jsonData.customerCode).to.eql(\"CH-N\" + randomNumber);",
									"    pm.expect(jsonData.rate).to.eql(\"0\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generate a random integer between 1 and 1000",
									"const randomNumber = Math.floor(Math.random() * 1000) + 1;",
									"",
									"// Save it to an environment variable",
									"pm.environment.set(\"randomNumber\", randomNumber);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"customerCode\": \"CH-N{{randomNumber}}\",\n    \"description\": \"description\",\n    \"rate\": \"0\",\n    \"active\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/v1/organisations/{{orgId}}/vat-codes",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"organisations",
								"{{orgId}}",
								"vat-codes"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST VAT Codes - Duplicate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check if response status code is 200",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(409);",
									"});",
									"",
									"// Parse response JSON",
									"const jsonData = pm.response.json();",
									"",
									"// Check if 'keyName' exists and equals 'expectedValue'",
									"pm.test(\"Check if inserted\", function () {",
									"    pm.expect(jsonData.error.title).to.eql(\"ORGANISATION_VAT_ALREADY_EXISTS\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generate a random integer between 1 and 1000",
									"const randomNumber = Math.floor(Math.random() * 1000) + 1;",
									"",
									"// Save it to an environment variable",
									"pm.environment.set(\"randomNumber\", randomNumber);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"customerCode\": \"CH-N\",\n    \"description\": \"description\",\n    \"rate\": \"0\",\n    \"active\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/v1/organisations/{{orgId}}/vat-codes",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"organisations",
								"{{orgId}}",
								"vat-codes"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET reference Codes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check if response status code is 200",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse response JSON",
									"const jsonData = pm.response.json();",
									"",
									"// Check if 'keyName' exists and equals 'expectedValue'",
									"pm.test(\"Check if array contains elements\", function () {",
									"    pm.expect(jsonData).to.be.an('array').that.is.not.empty;",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/organisations/{{orgId}}/reference-codes",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"organisations",
								"{{orgId}}",
								"reference-codes"
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT Reference Codes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check if response status code is 200",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse response JSON",
									"const jsonData = pm.response.json();",
									"",
									"// Check if 'keyName' exists and equals 'expectedValue'",
									"pm.test(\"Check if  name has changed\", function () {",
									"    pm.expect(jsonData.description).to.eql(\"New Postman Name\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"referenceCode\": \"1100\",\n    \"name\": \"New Postman Name\",\n    \"active\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/v1/organisations/{{orgId}}/reference-codes",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"organisations",
								"{{orgId}}",
								"reference-codes"
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT reference Codes - Unkown Code Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check if response status code is 200",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"// Parse response JSON",
									"const jsonData = pm.response.json();",
									"",
									"// Check if 'keyName' exists and equals 'expectedValue'",
									"pm.test(\"Check if error\", function () {",
									"    pm.expect(jsonData.error.title).to.eql(\"REFERENCE_CODE_NOT_FOUND\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"referenceCode\": \"11010101\",\n    \"name\": \"New Postman Name\",\n    \"active\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/v1/organisations/{{orgId}}/reference-codes",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"organisations",
								"{{orgId}}",
								"reference-codes"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST Reference Codes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check if response status code is 200",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse response JSON",
									"const jsonData = pm.response.json();",
									"",
									"// Check if 'keyName' exists and equals 'expectedValue'",
									"pm.test(\"Check if inserted\", function () {",
									"    const randomNumber = pm.environment.get(\"randomNumber\");",
									"    pm.expect(jsonData.referenceCode).to.eql(\"\"+randomNumber);",
									"    pm.expect(jsonData.description).to.eql(\"Random referenceCode\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generate a random integer between 1 and 1000",
									"const randomNumber = Math.floor(Math.random() * 1000) + 1;",
									"",
									"// Save it to an environment variable",
									"pm.environment.set(\"randomNumber\", randomNumber);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"referenceCode\": \"{{randomNumber}}\",\n  \"name\": \"Random referenceCode\",\n  \"active\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/v1/organisations/{{orgId}}/reference-codes",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"organisations",
								"{{orgId}}",
								"reference-codes"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST reference Codes - Duplicate Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check if response status code is 200",
									"pm.test(\"Status code is 409\", function () {",
									"    pm.response.to.have.status(409);",
									"});",
									"",
									"// Parse response JSON",
									"const jsonData = pm.response.json();",
									"",
									"// Check if 'keyName' exists and equals 'expectedValue'",
									"pm.test(\"Check if inserted\", function () {",
									"    pm.expect(jsonData.error.title).to.eql(\"REFERENCE_CODE_ALREADY_EXIST\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generate a random integer between 1 and 1000",
									"const randomNumber = Math.floor(Math.random() * 1000) + 1;",
									"",
									"// Save it to an environment variable",
									"pm.environment.set(\"randomNumber\", randomNumber);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"referenceCode\": \"1100\",\n  \"name\": \"Random referenceCode\",\n  \"active\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/v1/organisations/{{orgId}}/reference-codes",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"organisations",
								"{{orgId}}",
								"reference-codes"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET projects",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check if response status code is 200",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse response JSON",
									"const jsonData = pm.response.json();",
									"",
									"// Check if 'keyName' exists and equals 'expectedValue'",
									"pm.test(\"Check if array contains elements\", function () {",
									"    pm.expect(jsonData).to.be.an('array').that.is.not.empty;",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/organisations/{{orgId}}/projects",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"organisations",
								"{{orgId}}",
								"projects"
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT projects",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check if response status code is 200",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse response JSON",
									"const jsonData = pm.response.json();",
									"",
									"// Check if 'keyName' exists and equals 'expectedValue'",
									"pm.test(\"Check if  name has changed\", function () {",
									"    pm.expect(jsonData.name).to.eql(\"New Postman Name\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"customerCode\": \"CF 000002 2023\",\n    \"name\": \"New Postman Name\",\n    \"active\": true\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/v1/organisations/{{orgId}}/projects",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"organisations",
								"{{orgId}}",
								"projects"
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT projects - Unkown Code",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check if response status code is 200",
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"// Parse response JSON",
									"const jsonData = pm.response.json();",
									"",
									"// Check if 'keyName' exists and equals 'expectedValue'",
									"pm.test(\"Check if error\", function () {",
									"    pm.expect(jsonData.error.title).to.eql(\"PROJECT_CODE_NOT_FOUND\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"customerCode\": \"CF 000002 2023 Postman Unkown\",\n    \"name\": \"New Postman Name\",\n    \"active\": true\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/v1/organisations/{{orgId}}/projects",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"organisations",
								"{{orgId}}",
								"projects"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST Projects Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check if response status code is 200",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse response JSON",
									"const jsonData = pm.response.json();",
									"",
									"// Check if 'keyName' exists and equals 'expectedValue'",
									"pm.test(\"Check if inserted\", function () {",
									"    const randomNumber = pm.environment.get(\"randomNumber\");",
									"    pm.expect(jsonData.customerCode).to.eql(\"\"+randomNumber);",
									"    pm.expect(jsonData.name).to.eql(\"New Postman Name\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generate a random integer between 1 and 1000",
									"const randomNumber = Math.floor(Math.random() * 1000) + 1;",
									"",
									"// Save it to an environment variable",
									"pm.environment.set(\"randomNumber\", randomNumber);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"customerCode\": \"{{randomNumber}}\",\n    \"name\": \"New Postman Name\",\n    \"active\": true\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/v1/organisations/{{orgId}}/projects",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"organisations",
								"{{orgId}}",
								"projects"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Event Codes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check if response status code is 200",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse response JSON",
									"const jsonData = pm.response.json();",
									"",
									"// Check if 'keyName' exists and equals 'expectedValue'",
									"pm.test(\"Check if array contains elements\", function () {",
									"    pm.expect(jsonData).to.be.an('array').that.is.not.empty;",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/organisations/{{orgId}}/event-codes",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"organisations",
								"{{orgId}}",
								"event-codes"
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT event codes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check if response status code is 200",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse response JSON",
									"const jsonData = pm.response.json();",
									"",
									"// Check if 'keyName' exists and equals 'expectedValue'",
									"pm.test(\"Check if  name has changed\", function () {",
									"    pm.expect(jsonData.description).to.eql(\"New Postman Name\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"debitReferenceCode\": \"1100\",\n    \"creditReferenceCode\": \"1100\",\n    \"name\": \"New Postman Name\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/v1/organisations/{{orgId}}/event-codes",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"organisations",
								"{{orgId}}",
								"event-codes"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST Event Codes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generate a random integer between 1 and 1000",
									"const randomNumber = Math.floor(Math.random() * 1000) + 1;",
									"",
									"// Save it to an environment variable",
									"pm.environment.set(\"randomNumber\", randomNumber);"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"debitReferenceCode\": \"1103\",\n    \"creditReferenceCode\": \"1103\",\n    \"name\": \"New Postman Name\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/v1/organisations/{{orgId}}/event-codes",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"organisations",
								"{{orgId}}",
								"event-codes"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET currencies",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check if response status code is 200",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse response JSON",
									"const jsonData = pm.response.json();",
									"",
									"// Check if 'keyName' exists and equals 'expectedValue'",
									"pm.test(\"Check if array contains elements\", function () {",
									"    pm.expect(jsonData).to.be.an('array').that.is.not.empty;",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							},
							{
								"key": "Content-Transfer-Encoding",
								"value": "",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/organisations/{{orgId}}/currencies",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"organisations",
								"{{orgId}}",
								"currencies"
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT currencies",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check if response status code is 200",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse response JSON",
									"const jsonData = pm.response.json();",
									"",
									"// Check if 'keyName' exists and equals 'expectedValue'",
									"pm.test(\"Check if  name has changed\", function () {",
									"    pm.expect(jsonData.currencyId).to.eql(\"New Postman Name\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"customerCode\": \"ADA\",\n    \"currencyId\": \"New Postman Name\",\n    \"active\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/v1/organisations/{{orgId}}/currencies",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"organisations",
								"{{orgId}}",
								"currencies"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST currencies",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check if response status code is 200",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse response JSON",
									"const jsonData = pm.response.json();",
									"",
									"// Check if 'keyName' exists and equals 'expectedValue'",
									"pm.test(\"Check if inserted\", function () {",
									"    const randomNumber = pm.environment.get(\"randomNumber\");",
									"    pm.expect(jsonData.customerCode).to.eql(\"\"+randomNumber);",
									"    pm.expect(jsonData.currencyId).to.eql(\"New Postman Name\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generate a random integer between 1 and 1000",
									"const randomNumber = Math.floor(Math.random() * 1000) + 1;",
									"",
									"// Save it to an environment variable",
									"pm.environment.set(\"randomNumber\", randomNumber);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"customerCode\": \"{{randomNumber}}\",\n    \"currencyId\": \"New Postman Name\",\n    \"active\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/v1/organisations/{{orgId}}/currencies",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"organisations",
								"{{orgId}}",
								"currencies"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET cost-centers",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check if response status code is 200",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse response JSON",
									"const jsonData = pm.response.json();",
									"",
									"// Check if 'keyName' exists and equals 'expectedValue'",
									"pm.test(\"Check if array contains elements\", function () {",
									"    pm.expect(jsonData).to.be.an('array').that.is.not.empty;",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							},
							{
								"key": "Content-Transfer-Encoding",
								"value": "",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/organisations/{{orgId}}/cost-centers",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"organisations",
								"{{orgId}}",
								"cost-centers"
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT cost centers",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check if response status code is 200",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse response JSON",
									"const jsonData = pm.response.json();",
									"",
									"// Check if 'keyName' exists and equals 'expectedValue'",
									"pm.test(\"Check if  name has changed\", function () {",
									"",
									"    pm.expect(jsonData.name).to.eql(\"New Postman Name\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"customerCode\": \"1000\",\n    \"name\": \"New Postman Name\",\n    \"active\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/v1/organisations/{{orgId}}/cost-centers",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"organisations",
								"{{orgId}}",
								"cost-centers"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST cost centers",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check if response status code is 200",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse response JSON",
									"const jsonData = pm.response.json();",
									"",
									"// Check if 'keyName' exists and equals 'expectedValue'",
									"pm.test(\"Check if inserted\", function () {",
									"    const randomNumber = pm.environment.get(\"randomNumber\");",
									"    pm.expect(jsonData.customerCode).to.eql(\"\"+randomNumber);",
									"    pm.expect(jsonData.name).to.eql(\"New Postman Name\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generate a random integer between 1 and 1000",
									"const randomNumber = Math.floor(Math.random() * 1000) + 1;",
									"",
									"// Save it to an environment variable",
									"pm.environment.set(\"randomNumber\", randomNumber);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"customerCode\": \"{{randomNumber}}\",\n    \"name\": \"New Postman Name\",\n    \"active\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/v1/organisations/{{orgId}}/cost-centers",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"organisations",
								"{{orgId}}",
								"cost-centers"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET chart of account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check if response status code is 200",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse response JSON",
									"const jsonData = pm.response.json();",
									"",
									"// Check if 'keyName' exists and equals 'expectedValue'",
									"pm.test(\"Check if array contains elements\", function () {",
									"    pm.expect(jsonData).to.be.an('array').that.is.not.empty;",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							},
							{
								"key": "Content-Transfer-Encoding",
								"value": "",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/organisations/{{orgId}}/chart-of-accounts",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"organisations",
								"{{orgId}}",
								"chart-of-accounts"
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT chart of accounts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check if response status code is 200",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse response JSON",
									"const jsonData = pm.response.json();",
									"",
									"// Check if 'keyName' exists and equals 'expectedValue'",
									"pm.test(\"Check if  name has changed\", function () {",
									"",
									"    pm.expect(jsonData.name).to.eql(\"New Postman Name\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"customerCode\": \"6311170100\",\n    \"eventRefCode\": \"7100\",\n    \"name\": \"New Postman Name\",\n    \"subType\": 18,\n    \"type\": 5,\n    \"active\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/v1/organisations/{{orgId}}/chart-of-accounts",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"organisations",
								"{{orgId}}",
								"chart-of-accounts"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Reconciliation",
			"item": [
				{
					"name": "GET Rejection Codes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check if response status code is 200",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse response JSON",
									"const jsonData = pm.response.json();",
									"",
									"// Check if 'keyName' exists and equals 'expectedValue'",
									"pm.test(\"Check if array contains elements\", function () {",
									"    pm.expect(jsonData).to.be.an('array').that.is.not.empty;",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"customerCode\": \"6311170100\",\n    \"refCode\": \"7157\",\n    \"eventRefCode\": \"7100\",\n    \"name\": \"New Postman Name\",\n    \"subType\": 18,\n    \"type\": 5,\n    \"active\": true\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/transactions-rejection-codes",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"transactions-rejection-codes"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST Transactions Reconcile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check if response status code is 200",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse response JSON",
									"const jsonData = pm.response.json();",
									"",
									"// Check if 'keyName' exists and equals 'expectedValue'",
									"pm.test(\"Check if  response is valid\", function () {",
									"",
									"    pm.expect(jsonData.total).to.eql(0);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"organisationId\": \"75f95560c1d883ee7628993da5adf725a5d97a13929fd4f477be0faf5020ca94\",\n  \"filter\": \"UNRECONCILED\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/v1/transactions-reconcile",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"transactions-reconcile"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST Reconcile Trigger",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check if response status code is 200",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse response JSON",
									"const jsonData = pm.response.json();",
									"",
									"// Check if 'keyName' exists and equals 'expectedValue'",
									"pm.test(\"Check if  response is valid\", function () {",
									"",
									"    pm.expect(jsonData.message).to.eql(\"We have received your reconcile request now.\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"organisationId\": \"75f95560c1d883ee7628993da5adf725a5d97a13929fd4f477be0faf5020ca94\",\n  \"extractorType\": \"NETSUITE\",\n  \"dateFrom\": \"2024-01-01\",\n  \"dateTo\": \"2024-12-31\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/v1/reconcile/trigger",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"reconcile",
								"trigger"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Dashboards",
			"item": [
				{
					"name": "GET Metrics",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check if response status code is 200",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse response JSON",
									"const jsonData = pm.response.json();",
									"",
									"// Check if 'keyName' exists and equals 'expectedValue'",
									"pm.test(\"Check if array contains elements\", function () {",
									"    pm.expect(jsonData).to.be.an('array');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{base_url}}/api/v1/metrics/dashboards/{{orgId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"metrics",
								"dashboards",
								"{{orgId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST Save Dashboards",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check if response status code is 200",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"organisationId\": \"75f95560c1d883ee7628993da5adf725a5d97a13929fd4f477be0faf5020ca94\",\n  \"dashboards\": [\n    {\n      \"id\": 0,\n      \"name\": \"string\",\n      \"description\": \"string\",\n      \"charts\": [\n        {\n          \"width\": 0,\n          \"height\": 0,\n          \"metric\": \"BALANCE_SHEET\",\n          \"subMetric\": \"ASSET_CATEGORIES\",\n          \"xpos\": 0,\n          \"ypos\": 0\n        }\n      ]\n    }\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/v1/metrics/saveDashboard",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"metrics",
								"saveDashboard"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Transactions",
			"item": [
				{
					"name": "POST Extraction",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check if response status code is 200",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(202);",
									"});",
									"",
									"// Parse response JSON",
									"const jsonData = pm.response.json();",
									"",
									"// Check if 'keyName' exists and equals 'expectedValue'",
									"pm.test(\"Check if array contains elements\", function () {",
									"    pm.expect(jsonData.message).eq(\"We have received your extraction request now. Please review imported transactions from the batch list.\");",
									"});"
								],
								"type": "text/javascript",
<<<<<<< HEAD
								"packages": {}
=======
								"packages": {},
								"requests": {}
>>>>>>> release/1.1.0
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "organisationId",
									"value": "75f95560c1d883ee7628993da5adf725a5d97a13929fd4f477be0faf5020ca94",
									"type": "text"
								},
								{
									"key": "extractorType",
									"value": "CSV",
									"type": "text"
								},
								{
									"key": "dateFrom",
									"value": "2013-01-02",
									"type": "text"
								},
								{
									"key": "dateTo",
									"value": "2024-05-01",
									"type": "text"
								},
								{
									"key": "file",
									"type": "file",
									"src": "/Users/thkammer/Documents/dev/cardano/java/cf-lob-platform/docs/examples/transactions_csv_example.csv"
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/api/v1/extraction",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"extraction"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST transactions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Parse response JSON",
									"let jsonData = pm.response.json();",
									"",
									"// Retry counter",
									"let counter = parseInt(pm.environment.get(\"retryCounter\") || \"0\", 10);",
									"counter++;",
									"pm.environment.set(\"retryCounter\", counter);",
									"",
									"// Condition: array is empty and retry limit not reached",
									"if (counter < 20 && Array.isArray(jsonData) && jsonData.length === 0) {",
									"    setTimeout(function () {",
									"        console.log(`Retry ${counter}: array still empty. Waiting before retry...`);",
									"        pm.execution.setNextRequest('POST transactions'); // jump to wait request",
									"    }, 10000); // 10 seconds delay before retrying (10000 milliseconds)",
									"} else {",
									"    console.log(`Stopping after ${counter} tries.`);",
									"    pm.environment.set(\"retryCounter\", 0); // reset",
									"    pm.execution.setNextRequest(null); // stop",
									"}",
									"",
									"// ✅ Basic tests",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"organisationId\": \"75f95560c1d883ee7628993da5adf725a5d97a13929fd4f477be0faf5020ca94\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/v1/transactions",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"transactions"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST transaction approve",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check if response status code is 200",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse response JSON",
									"const jsonData = pm.response.json();",
									"",
									"// Check if 'keyName' exists and equals 'expectedValue'",
									"pm.test(\"Check if success is true\", function () {",
									"    pm.expect(jsonData[0].success).eq(true);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"organisationId\": \"{{orgId}}\",\n    \"transactionIds\": [\n        {\n            \"id\": \"170601e7d7217efdd3ddc6720aabf33e134798b458d16d2d69f8c354ad4ca826\"\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/v1/transactions/approve",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"transactions",
								"approve"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST transaction publish",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check if response status code is 200",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse response JSON",
									"const jsonData = pm.response.json();",
									"",
									"// Check if 'keyName' exists and equals 'expectedValue'",
									"pm.test(\"Check if success is true\", function () {",
									"    pm.expect(jsonData[0].success).eq(true);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"organisationId\": \"{{orgId}}\",\n    \"transactionIds\": [\n        {\n            \"id\": \"170601e7d7217efdd3ddc6720aabf33e134798b458d16d2d69f8c354ad4ca826\"\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/v1/transactions/publish",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"transactions",
								"publish"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST transaction reject",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check if response status code is 200",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse response JSON",
									"const jsonData = pm.response.json();",
									"",
									"// Check if 'keyName' exists and equals 'expectedValue'",
									"pm.test(\"Check if success is true\", function () {",
									"    pm.expect(jsonData.success).eq(true);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"organisationId\": \"{{orgId}}\",\n    \"transactionId\": \"54f3ec88393a7966a9d2e285dcda2bf3a1806e1e2d6dc6224c16c7fcf57e9130\",\n    \"transactionItemsRejections\": [\n    {\n      \"txItemId\": \"07ada41d8df8bcd8324e35f982eaaf23bbdf1fa39efa957557a417bd87ff2d7b\",\n      \"rejectionReason\": \"INCORRECT_VAT_CODE\"\n    },\n    {\n      \"txItemId\": \"d96235c121c35a9ac3b5ac3126faadf362bce926e782784a8f69ac7f7694651e\",\n      \"rejectionReason\": \"REVIEW_PARENT_PROJECT_CODE\"\n    }\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/v1/transaction/reject",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"transaction",
								"reject"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST Extraction Validation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// commenting this out until we have a health check for the publisher implemented",
									"// // Check if response status code is 200",
									" pm.test(\"Status code is 200\", function () {",
									"     pm.response.to.have.status(200);",
									" });",
									"",
									"// // Parse response JSON",
									" const jsonData = pm.response.json();",
									"// Check if 'keyName' exists and equals 'expectedValue'",
									" pm.test(\"Check if array contains elements\", function () {",
									"     pm.expect(jsonData.valid).eq(true);",
									" });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"organisationId\": \"75f95560c1d883ee7628993da5adf725a5d97a13929fd4f477be0faf5020ca94\",\n  \"extractorType\": \"NETSUITE\",\n  \"dateFrom\": \"2013-01-02\",\n  \"dateTo\": \"2024-05-01\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/v1/extraction/validation",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"extraction",
								"validation"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Transaction Detail",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check if response status code is 200",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse response JSON",
									"const jsonData = pm.response.json();",
									"",
									"// Check if 'keyName' exists and equals 'expectedValue'",
									"pm.test(\"Check if array contains elements\", function () {",
									"    const transactionId = pm.environment.get(\"transactionId\");",
									"    pm.expect(jsonData.id).eq(transactionId + \"\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/transactions/{{transactionId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"transactions",
								"{{transactionId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Transaction types",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check if response status code is 200",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse response JSON",
									"const jsonData = pm.response.json();",
									"",
									"// Check if 'keyName' exists and equals 'expectedValue'",
									"pm.test(\"Check if array contains elements\", function () {",
									"    pm.expect(jsonData).to.be.an('array').that.is.not.empty;",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/transaction-types",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"transaction-types"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Rejection Reasons",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check if response status code is 200",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse response JSON",
									"const jsonData = pm.response.json();",
									"",
									"// Check if 'keyName' exists and equals 'expectedValue'",
									"pm.test(\"Check if array contains elements\", function () {",
									"    pm.expect(jsonData).to.be.an('array').that.is.not.empty;",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/rejection-reasons",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"rejection-reasons"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Batches",
			"item": [
				{
					"name": "POST Batches",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check if response status code is 200",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse response JSON",
									"const jsonData = pm.response.json();",
									"",
									"// Set environment variable 'batchId' ",
									"pm.environment.set(\"batchId\", jsonData.batchs[0].id);",
									"",
									"// Check if 'keyName' exists and equals 'expectedValue'",
									"pm.test(\"Check if array contains elements\", function () {",
									"    pm.expect(jsonData.total).above(0)",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"organisationId\": \"{{orgId}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/v1/batches",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"batches"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Batch",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check if response status code is 200",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse response JSON",
									"const jsonData = pm.response.json();",
									"",
									"// Check if 'keyName' exists and equals 'expectedValue'",
									"pm.test(\"Check response contains BatchID \", function () {",
									"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"batchId\"));",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/batches/{{batchId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"batches",
								"{{batchId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Batch reprocess",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check if response status code is 200",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse response JSON",
									"const jsonData = pm.response.json();",
									"",
									"// Check if 'keyName' exists and equals 'expectedValue'",
									"pm.test(\"Check if array contains elements\", function () {",
									"    pm.expect(jsonData.success).eq(true);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/batches/reprocess/{{batchId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"batches",
								"reprocess",
								"{{batchId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Reporting",
			"item": [
				{
					"name": "POST Report search",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check if response status code is 404 -- Currently we don't have any test reports",
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"organisationId\": \"75f95560c1d883ee7628993da5adf725a5d97a13929fd4f477be0faf5020ca94\",\n  \"reportType\": \"INCOME_STATEMENT\",\n  \"intervalType\": \"YEAR\",\n  \"year\": 2024,\n  \"period\": 3\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/v1/report-search",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"report-search"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST Generate Report Preview",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check if response status code is 404 -- Currently we don't have any test reports",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Total is 1\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.total).to.eql(1);",
									"})",
									"",
									"pm.test(\"Profit for the Year is -800\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.report[0].profitForTheYear).to.eql('-800');",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"organisationId\": \"75f95560c1d883ee7628993da5adf725a5d97a13929fd4f477be0faf5020ca94\",\n  \"reportType\": \"INCOME_STATEMENT\",\n  \"intervalType\": \"YEAR\",\n  \"year\": 2024,\n  \"period\": 3,\n  \"preview\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/v1/report-generate",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"report-generate"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"variable": [
		{
			"key": "access_token",
			"value": ""
		}
	]
}