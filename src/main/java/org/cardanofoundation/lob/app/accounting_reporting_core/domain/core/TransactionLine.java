package org.cardanofoundation.lob.app.accounting_reporting_core.domain.core;

import org.cardanofoundation.lob.app.organisation.domain.core.Currency;
import org.cardanofoundation.lob.app.organisation.domain.core.OrganisationCurrency;

import java.math.BigDecimal;
import java.time.LocalDate;
import java.util.Optional;
import java.util.UUID;

public record TransactionLine(

        // mandatory values

        String id, // unique identifier for a transaction line, generated by us global currencyId

        String organisationId, // unique identifier for an organisation, generated by LOB

        TransactionType transactionType, // LOB transaction type

        LocalDate entryDate, // date of the transaction

        String internalTransactionNumber, // unique transaction number, organisation level value

        UUID ingestionId,

        String accountCodeDebit, //

        // base currency specific value to the organisation
        CurrencyPair baseCurrency,

        // target to which we convert
        CurrencyPair targetCurrency,

        BigDecimal fxRate,

        LedgerDispatchStatus ledgerDispatchStatus,

        /// optionals below

        Optional<String> internalDocumentNumber,

        Optional<String> internalVendorCode,

        Optional<String> vendorName,

        Optional<String> internalCostCenterCode,

        Optional<String> internalProjectCode,

        Optional<VatPair> vat,

        Optional<String> accountNameDebit,

        Optional<String> accountCredit,

        Optional<Boolean> validated,

        Optional<BigDecimal> amountFcy,

        Optional<BigDecimal> amountLcy) {

    public static TransactionLine recreateWithValidation(
            TransactionLine base,
            boolean validated
    ) {
        return new TransactionLine(
                UUID.randomUUID().toString(),
                base.organisationId,
                base.transactionType,
                base.entryDate,
                base.internalTransactionNumber,
                base.ingestionId,
                base.accountCodeDebit,
                base.baseCurrency,
                base.targetCurrency,
                base.fxRate,
                base.ledgerDispatchStatus,
                base.internalDocumentNumber,
                base.internalVendorCode,
                base.vendorName,
                base.internalCostCenterCode,
                base.internalProjectCode,
                base.vat,
                base.accountNameDebit,
                base.accountCredit,
                Optional.of(validated),
                base.amountFcy,
                base.amountLcy);
    }

    // TODO equality in business sense will not include in the future e.g. ingestion_id
    public boolean isBusinessEqual(TransactionLine transactionLine) {
        return this.equals(transactionLine);
    }

    public record CurrencyPair(OrganisationCurrency organisationCurrency, Currency currency) {
    }

    public record VatPair(String vatCode, BigDecimal vatRate) {
    }

    public enum LedgerDispatchStatus {
        NOT_DISPATCHED, // not dispatched to blockchain(s) yet

        DISPATCHED, // dispatched to blockchain(s)

        COMPLETED,

        FINALIZED; // finalised on blockchain(s)

        /**
         * Dispatchable means that we can dispatch the transaction line to the blockchain(s)
         */
        public boolean isDispatchable() {
            return this == NOT_DISPATCHED;
        }

    }

}
